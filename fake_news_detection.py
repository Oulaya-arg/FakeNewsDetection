# -*- coding: utf-8 -*-
"""fake-news-detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15-QqPo3qqkM3O7c-tGxCsRTD0R30kLjK

# Fake News Detection

![image.png](attachment:image.png)

## Importing Libraries
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import re
import string

"""## Importing Dataset"""

df_fake = pd.read_csv("Fake.csv")
df_true = pd.read_csv("True.csv")

df_fake.head()

df_true.head(5)

"""## Inserting a column "class" as target feature"""

df_fake["class"] = 0
df_true["class"] = 1

df_fake.shape, df_true.shape

# Removing last 10 rows for manual testing
df_fake_manual_testing = df_fake.tail(10)
for i in range(23480,23470,-1):
    df_fake.drop([i], axis = 0, inplace = True)


df_true_manual_testing = df_true.tail(10)
for i in range(21416,21406,-1):
    df_true.drop([i], axis = 0, inplace = True)

df_fake.shape, df_true.shape

df_fake_manual_testing["class"] = 0
df_true_manual_testing["class"] = 1

df_fake_manual_testing.head(10)

df_true_manual_testing.head(10)

df_manual_testing = pd.concat([df_fake_manual_testing,df_true_manual_testing], axis = 0)
df_manual_testing.to_csv("manual_testing.csv")

"""## Merging True and Fake Dataframes"""

df_merge = pd.concat([df_fake, df_true], axis =0 )
df_merge.head(10)

df_merge.columns

"""## Removing columns which are not required"""

df = df_merge.drop(["title", "subject","date"], axis = 1)

df.isnull().sum()

"""## Random Shuffling the dataframe"""

df = df.sample(frac = 1)

df.head()

df.reset_index(inplace = True)
df.drop(["index"], axis = 1, inplace = True)

df.columns

df.head()

"""## Creating a function to process the texts"""

def wordopt(text):
    text = text.lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub("\\W"," ",text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)
    return text

df["text"] = df["text"].apply(wordopt)

"""## Defining dependent and independent variables"""

x = df["text"]
y = df["class"]

"""## Splitting Training and Testing"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)

"""## Convert text to vectors"""

from sklearn.feature_extraction.text import TfidfVectorizer

vectorization = TfidfVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv_test = vectorization.transform(x_test)

"""## Logistic Regression"""

from sklearn.linear_model import LogisticRegression

LR = LogisticRegression()
LR.fit(xv_train,y_train)

pred_lr=LR.predict(xv_test)

LR.score(xv_test, y_test)

print(classification_report(y_test, pred_lr))

"""# **Time complexity of Logistic regression:**"""

import time
start_time = time.time()
LR.fit(xv_train, y_train)
training_time = time.time() - start_time

# Measure prediction time
start_time = time.time()
pred_lr = LR.predict(xv_test)
prediction_time = time.time() - start_time

print(f"Training Time: {training_time:.6f} seconds")
print(f"Prediction Time: {prediction_time:.6f} seconds")

# Compute confusion matrix
cm_lr = confusion_matrix(y_test, pred_lr)

# Plot confusion matrix
plt.figure(figsize=(6, 5))
sns.heatmap(cm_lr, annot=True, fmt='d', cmap='Blues', xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])
plt.title('Confusion Matrix - Logistic Regression')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

"""## Decision Tree Classification"""

from sklearn.tree import DecisionTreeClassifier

DT = DecisionTreeClassifier()
DT.fit(xv_train, y_train)

pred_dt = DT.predict(xv_test)

DT.score(xv_test, y_test)

print(classification_report(y_test, pred_dt))

"""# **Time complexity of Decision trees**"""

import time
from sklearn.tree import DecisionTreeClassifier

# Initialize the Decision Tree Classifier
DT = DecisionTreeClassifier()

# Measure training time
start_time = time.time()
DT.fit(xv_train, y_train)
training_time = time.time() - start_time

# Measure prediction time
start_time = time.time()
pred_dt = DT.predict(xv_test)
prediction_time = time.time() - start_time

print(f"Training Time: {training_time:.6f} seconds")
print(f"Prediction Time: {prediction_time:.6f} seconds")

# Compute confusion matrix
cm_dt = confusion_matrix(y_test, pred_dt)

# Plot confusion matrix
plt.figure(figsize=(6, 5))
sns.heatmap(cm_dt, annot=True, fmt='d', cmap='Blues', xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])
plt.title('Confusion Matrix - Decision Tree')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

"""## Gradient Boosting Classifier"""

from sklearn.ensemble import GradientBoostingClassifier

GBC = GradientBoostingClassifier(random_state=0)
GBC.fit(xv_train, y_train)

pred_gbc = GBC.predict(xv_test)

GBC.score(xv_test, y_test)

print(classification_report(y_test, pred_gbc))

"""# **Time complexity of Gradient Boosting classifier**"""

import time
from sklearn.ensemble import GradientBoostingClassifier

# Initialize the Gradient Boosting Classifier
GBC = GradientBoostingClassifier(random_state=0)

# Measure training time
start_time = time.time()
GBC.fit(xv_train, y_train)
training_time = time.time() - start_time

# Measure prediction time
start_time = time.time()
pred_gbc = GBC.predict(xv_test)
prediction_time = time.time() - start_time

print(f"Training Time: {training_time:.6f} seconds")
print(f"Prediction Time: {prediction_time:.6f} seconds")

# Compute confusion matrix
cm_gbc = confusion_matrix(y_test, pred_gbc)

# Plot confusion matrix
plt.figure(figsize=(6, 5))
sns.heatmap(cm_gbc, annot=True, fmt='d', cmap='Blues', xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])
plt.title('Confusion Matrix - Gradient Boosting Classifier')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

"""## Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier

RFC = RandomForestClassifier(random_state=0)
RFC.fit(xv_train, y_train)

pred_rfc = RFC.predict(xv_test)

RFC.score(xv_test, y_test)

print(classification_report(y_test, pred_rfc))

"""## **Time complexity of Random forest**"""

import time
from sklearn.ensemble import RandomForestClassifier

# Initialize the Random Forest Classifier
RFC = RandomForestClassifier(random_state=0)

# Measure training time
start_time = time.time()
RFC.fit(xv_train, y_train)
training_time = time.time() - start_time

# Measure prediction time
start_time = time.time()
pred_rfc = RFC.predict(xv_test)
prediction_time = time.time() - start_time

print(f"Training Time: {training_time:.6f} seconds")
print(f"Prediction Time: {prediction_time:.6f} seconds")

"""Vizualisation"""

from sklearn.metrics import confusion_matrix
import seaborn as sns

# Compute confusion matrix
cm = confusion_matrix(y_test, pred_rfc)

# Plot heatmap of confusion matrix
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

"""## Model Testing"""

def output_lable(n):
    if n == 0:
        return "Fake News"
    elif n == 1:
        return "Not A Fake News"

def manual_testing(news):
    testing_news = {"text":[news]}
    new_def_test = pd.DataFrame(testing_news)
    new_def_test["text"] = new_def_test["text"].apply(wordopt)
    new_x_test = new_def_test["text"]
    new_xv_test = vectorization.transform(new_x_test)
    pred_LR = LR.predict(new_xv_test)
    pred_DT = DT.predict(new_xv_test)
    pred_GBC = GBC.predict(new_xv_test)
    pred_RFC = RFC.predict(new_xv_test)

    return print("\n\nLR Prediction: {} \nDT Prediction: {} \nGBC Prediction: {} \nRFC Prediction: {}".format(output_lable(pred_LR[0]),                                                                                                       output_lable(pred_DT[0]),
                                                                                                              output_lable(pred_GBC[0]),
                                                                                                              output_lable(pred_RFC[0])))

news = str(input())
manual_testing(news)

news = str(input())
manual_testing(news)

news = str(input())
manual_testing(news)

"""# **Comparison across models used for Fake news detection**"""

import matplotlib.pyplot as plt
import numpy as np

# Model names
models = ['Logistic Regression', 'Gradient Boosting', 'Decision Tree', 'Random Forest']

# Training times (in seconds) for each model
train_times = [5.640158, 309.438084, 41.682949, 70.397564]

# Prediction times (in seconds) for each model
predict_times = [0.017743, 0.040059, 0.017679, 1.079823]

# Number of models
n_models = len(models)

# X positions for the bars
ind = np.arange(n_models)

# Bar width
width = 0.35

# Create the plot
fig, ax = plt.subplots(figsize=(10, 6))

# Plotting the training times
bar1 = ax.bar(ind - width/2, train_times, width, label='Training Time', color='blue')

# Plotting the prediction times
bar2 = ax.bar(ind + width/2, predict_times, width, label='Prediction Time', color='orange')

# Adding titles and labels
ax.set_xlabel('Models', fontsize=14)
ax.set_ylabel('Time (seconds)', fontsize=14)
ax.set_title('Comparison of Models: Training vs Prediction Time', fontsize=16)
ax.set_xticks(ind)
ax.set_xticklabels(models, rotation=45, ha='right', fontsize=12)
ax.legend()

# Show the plot
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Model names
models = ['Logistic Regression', 'Gradient Boosting', 'Decision Tree', 'Random Forest']

# Training times (in seconds) for each model
train_times = [5.640158, 309.438084, 41.682949, 70.397564]

# Prediction times (in seconds) for each model
predict_times = [0.017743, 0.040059, 0.017679, 1.079823]

# Create the plot
fig, ax = plt.subplots(figsize=(10, 6))

# Plotting the training times as horizontal bars
ax.barh(models, train_times, color='blue', label='Training Time')

# Plotting the prediction times as horizontal bars
ax.barh(models, predict_times, color='orange', left=train_times, label='Prediction Time')

# Adding titles and labels
ax.set_xlabel('Time (seconds)', fontsize=14)
ax.set_ylabel('Models', fontsize=14)
ax.set_title('Comparison of Models: Training vs Prediction Time', fontsize=16)
ax.legend()

# Show the plot
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Model names
models = ['Logistic Regression', 'Gradient Boosting', 'Decision Tree', 'Random Forest']

# Training times (in seconds) for each model
train_times = [5.640158, 309.438084, 41.682949, 70.397564]

# Prediction times (in seconds) for each model
predict_times = [0.017743, 0.040059, 0.017679, 1.079823]

# X positions for each model
ind = np.arange(len(models))

# Create the plot
plt.figure(figsize=(10, 6))

# Plotting the training times as a line plot
plt.plot(models, train_times, label='Training Time', marker='o', color='blue')

# Plotting the prediction times as a line plot
plt.plot(models, predict_times, label='Prediction Time', marker='o', color='orange')

# Adding titles and labels
plt.xlabel('Models', fontsize=14)
plt.ylabel('Time (seconds)', fontsize=14)
plt.title('Comparison of Models: Training vs Prediction Time', fontsize=16)
plt.legend()

# Show the plot
plt.xticks(rotation=45, ha='right', fontsize=12)
plt.tight_layout()
plt.show()

